apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-uploads-pvc
  namespace: chatbot-system
  labels:
    app.kubernetes.io/name: chatbot-backend
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-backend
  namespace: chatbot-system
  labels:
    app.kubernetes.io/name: chatbot-backend
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: chatbot-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chatbot-backend
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: chatbot-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      imagePullSecrets:
      - name: chatbot-registry
      containers:
      - name: backend
        image: axiestudio/aichatbot:backend-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: LOG_LEVEL
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: DEBUG
        - name: DATABASE_URL
          value: "postgresql+asyncpg://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/$(REDIS_DB)"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: POSTGRES_DB
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: REDIS_PASSWORD
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: REDIS_DB
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: SECRET_KEY
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: JWT_SECRET_KEY
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: ANTHROPIC_API_KEY
        - name: SUPABASE_URL
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: SUPABASE_URL
        - name: SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: SUPABASE_ANON_KEY
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: SENTRY_DSN
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: CORS_ORIGINS
        - name: MAX_UPLOAD_SIZE
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: MAX_UPLOAD_SIZE
        - name: RATE_LIMIT_PER_MINUTE
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: RATE_LIMIT_PER_MINUTE
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: backend-uploads-pvc
      - name: logs
        emptyDir: {}
      - name: data
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: chatbot-backend
  namespace: chatbot-system
  labels:
    app.kubernetes.io/name: chatbot-backend
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: chatbot-backend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chatbot-backend
  namespace: chatbot-system
  labels:
    app.kubernetes.io/name: chatbot-backend
    app.kubernetes.io/component: api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: chatbot-system
  name: chatbot-backend-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chatbot-backend-rolebinding
  namespace: chatbot-system
subjects:
- kind: ServiceAccount
  name: chatbot-backend
  namespace: chatbot-system
roleRef:
  kind: Role
  name: chatbot-backend-role
  apiGroup: rbac.authorization.k8s.io
